// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ErrorLog is an object representing the database table.
type ErrorLog struct {
	LogID       int       `boil:"log_id" json:"log_id" toml:"log_id" yaml:"log_id"`
	ErrMessage  string    `boil:"err_message" json:"err_message" toml:"err_message" yaml:"err_message"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ErrorOrigin string    `boil:"error_origin" json:"error_origin" toml:"error_origin" yaml:"error_origin"`

	R *errorLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L errorLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ErrorLogColumns = struct {
	LogID       string
	ErrMessage  string
	CreatedAt   string
	ErrorOrigin string
}{
	LogID:       "log_id",
	ErrMessage:  "err_message",
	CreatedAt:   "created_at",
	ErrorOrigin: "error_origin",
}

var ErrorLogTableColumns = struct {
	LogID       string
	ErrMessage  string
	CreatedAt   string
	ErrorOrigin string
}{
	LogID:       "error_log.log_id",
	ErrMessage:  "error_log.err_message",
	CreatedAt:   "error_log.created_at",
	ErrorOrigin: "error_log.error_origin",
}

// Generated where

var ErrorLogWhere = struct {
	LogID       whereHelperint
	ErrMessage  whereHelperstring
	CreatedAt   whereHelpertime_Time
	ErrorOrigin whereHelperstring
}{
	LogID:       whereHelperint{field: "\"error_log\".\"log_id\""},
	ErrMessage:  whereHelperstring{field: "\"error_log\".\"err_message\""},
	CreatedAt:   whereHelpertime_Time{field: "\"error_log\".\"created_at\""},
	ErrorOrigin: whereHelperstring{field: "\"error_log\".\"error_origin\""},
}

// ErrorLogRels is where relationship names are stored.
var ErrorLogRels = struct {
}{}

// errorLogR is where relationships are stored.
type errorLogR struct {
}

// NewStruct creates a new relationship struct
func (*errorLogR) NewStruct() *errorLogR {
	return &errorLogR{}
}

// errorLogL is where Load methods for each relationship are stored.
type errorLogL struct{}

var (
	errorLogAllColumns            = []string{"log_id", "err_message", "created_at", "error_origin"}
	errorLogColumnsWithoutDefault = []string{"err_message", "created_at", "error_origin"}
	errorLogColumnsWithDefault    = []string{"log_id"}
	errorLogPrimaryKeyColumns     = []string{"log_id"}
)

type (
	// ErrorLogSlice is an alias for a slice of pointers to ErrorLog.
	// This should almost always be used instead of []ErrorLog.
	ErrorLogSlice []*ErrorLog
	// ErrorLogHook is the signature for custom ErrorLog hook methods
	ErrorLogHook func(context.Context, boil.ContextExecutor, *ErrorLog) error

	errorLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	errorLogType                 = reflect.TypeOf(&ErrorLog{})
	errorLogMapping              = queries.MakeStructMapping(errorLogType)
	errorLogPrimaryKeyMapping, _ = queries.BindMapping(errorLogType, errorLogMapping, errorLogPrimaryKeyColumns)
	errorLogInsertCacheMut       sync.RWMutex
	errorLogInsertCache          = make(map[string]insertCache)
	errorLogUpdateCacheMut       sync.RWMutex
	errorLogUpdateCache          = make(map[string]updateCache)
	errorLogUpsertCacheMut       sync.RWMutex
	errorLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var errorLogBeforeInsertHooks []ErrorLogHook
var errorLogBeforeUpdateHooks []ErrorLogHook
var errorLogBeforeDeleteHooks []ErrorLogHook
var errorLogBeforeUpsertHooks []ErrorLogHook

var errorLogAfterInsertHooks []ErrorLogHook
var errorLogAfterSelectHooks []ErrorLogHook
var errorLogAfterUpdateHooks []ErrorLogHook
var errorLogAfterDeleteHooks []ErrorLogHook
var errorLogAfterUpsertHooks []ErrorLogHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ErrorLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range errorLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ErrorLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range errorLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ErrorLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range errorLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ErrorLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range errorLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ErrorLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range errorLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ErrorLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range errorLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ErrorLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range errorLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ErrorLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range errorLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ErrorLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range errorLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddErrorLogHook registers your hook function for all future operations.
func AddErrorLogHook(hookPoint boil.HookPoint, errorLogHook ErrorLogHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		errorLogBeforeInsertHooks = append(errorLogBeforeInsertHooks, errorLogHook)
	case boil.BeforeUpdateHook:
		errorLogBeforeUpdateHooks = append(errorLogBeforeUpdateHooks, errorLogHook)
	case boil.BeforeDeleteHook:
		errorLogBeforeDeleteHooks = append(errorLogBeforeDeleteHooks, errorLogHook)
	case boil.BeforeUpsertHook:
		errorLogBeforeUpsertHooks = append(errorLogBeforeUpsertHooks, errorLogHook)
	case boil.AfterInsertHook:
		errorLogAfterInsertHooks = append(errorLogAfterInsertHooks, errorLogHook)
	case boil.AfterSelectHook:
		errorLogAfterSelectHooks = append(errorLogAfterSelectHooks, errorLogHook)
	case boil.AfterUpdateHook:
		errorLogAfterUpdateHooks = append(errorLogAfterUpdateHooks, errorLogHook)
	case boil.AfterDeleteHook:
		errorLogAfterDeleteHooks = append(errorLogAfterDeleteHooks, errorLogHook)
	case boil.AfterUpsertHook:
		errorLogAfterUpsertHooks = append(errorLogAfterUpsertHooks, errorLogHook)
	}
}

// One returns a single errorLog record from the query.
func (q errorLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ErrorLog, error) {
	o := &ErrorLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for error_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ErrorLog records from the query.
func (q errorLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (ErrorLogSlice, error) {
	var o []*ErrorLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ErrorLog slice")
	}

	if len(errorLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ErrorLog records in the query.
func (q errorLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count error_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q errorLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if error_log exists")
	}

	return count > 0, nil
}

// ErrorLogs retrieves all the records using an executor.
func ErrorLogs(mods ...qm.QueryMod) errorLogQuery {
	mods = append(mods, qm.From("\"error_log\""))
	return errorLogQuery{NewQuery(mods...)}
}

// FindErrorLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindErrorLog(ctx context.Context, exec boil.ContextExecutor, logID int, selectCols ...string) (*ErrorLog, error) {
	errorLogObj := &ErrorLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"error_log\" where \"log_id\"=$1", sel,
	)

	q := queries.Raw(query, logID)

	err := q.Bind(ctx, exec, errorLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from error_log")
	}

	if err = errorLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return errorLogObj, err
	}

	return errorLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ErrorLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no error_log provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(errorLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	errorLogInsertCacheMut.RLock()
	cache, cached := errorLogInsertCache[key]
	errorLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			errorLogAllColumns,
			errorLogColumnsWithDefault,
			errorLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(errorLogType, errorLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(errorLogType, errorLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"error_log\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"error_log\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into error_log")
	}

	if !cached {
		errorLogInsertCacheMut.Lock()
		errorLogInsertCache[key] = cache
		errorLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ErrorLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ErrorLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	errorLogUpdateCacheMut.RLock()
	cache, cached := errorLogUpdateCache[key]
	errorLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			errorLogAllColumns,
			errorLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update error_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"error_log\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, errorLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(errorLogType, errorLogMapping, append(wl, errorLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update error_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for error_log")
	}

	if !cached {
		errorLogUpdateCacheMut.Lock()
		errorLogUpdateCache[key] = cache
		errorLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q errorLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for error_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for error_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ErrorLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), errorLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"error_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, errorLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in errorLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all errorLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ErrorLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no error_log provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(errorLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	errorLogUpsertCacheMut.RLock()
	cache, cached := errorLogUpsertCache[key]
	errorLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			errorLogAllColumns,
			errorLogColumnsWithDefault,
			errorLogColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			errorLogAllColumns,
			errorLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert error_log, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(errorLogPrimaryKeyColumns))
			copy(conflict, errorLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"error_log\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(errorLogType, errorLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(errorLogType, errorLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert error_log")
	}

	if !cached {
		errorLogUpsertCacheMut.Lock()
		errorLogUpsertCache[key] = cache
		errorLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ErrorLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ErrorLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ErrorLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), errorLogPrimaryKeyMapping)
	sql := "DELETE FROM \"error_log\" WHERE \"log_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from error_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for error_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q errorLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no errorLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from error_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for error_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ErrorLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(errorLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), errorLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"error_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, errorLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from errorLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for error_log")
	}

	if len(errorLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ErrorLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindErrorLog(ctx, exec, o.LogID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ErrorLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ErrorLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), errorLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"error_log\".* FROM \"error_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, errorLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ErrorLogSlice")
	}

	*o = slice

	return nil
}

// ErrorLogExists checks if the ErrorLog row exists.
func ErrorLogExists(ctx context.Context, exec boil.ContextExecutor, logID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"error_log\" where \"log_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, logID)
	}
	row := exec.QueryRowContext(ctx, sql, logID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if error_log exists")
	}

	return exists, nil
}
