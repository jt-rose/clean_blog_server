#### GRAPHQL SDL ####
scalar Time

type User {
  user_id: Int! ## SQL generated PK
  username: String!
  email: String!
  ## password - not shared via graphql
  posts: PaginatedPosts ## field resolver
  comments: PaginatedComments ## field resolver
  created_at: Time!
}

input UserSearch {
  username: String ## nullable for when searching all users
  limit: Int!
  offset: Int!
}

type PaginatedUsers {
  users: [User]
  more: Boolean!
}

input UserInput {
  username: String!
  email: String!
  password: String!
}

# Votes is a calculated object returning the up and down votes for either
# a post or a comment
type Votes {
  upvote: Int!
  downvote: Int!
}

enum VoteValue {
  upvote
  downvote
  neutral
}

# tracked vote record for particular posts. Maps to SQL Many to Many relationship.
type PostVote {
  post_id: Int!
  vote_value: VoteValue!
  user_id: Int!
}

type Post {
  post_id: Int!
  user_id: Int!
  user: User # field resolver
  title: String!
  subtitle: String! ## optional
  post_text: String! ## will store a JSON-serialized version of the HTML markup
  created_at: Time!
  comments: PaginatedComments ## field resolver for top-level comments
  votes: Votes! ## field resolver
  deleted: Boolean! ## deleted posts will still be stored in the database
  ## to allow for undoing a delete and restoring posts / comments / votes
}

input PostInput {
  title: String!
  subtitle: String
  text: String!
}

input PostSearch {
  title: String ## nullable for when not specifying a title
  limit: Int!
  offset: Int!
}

type PaginatedPosts {
  posts: [Post]
  more: Boolean!
}

# tracked vote record for particular comments. Maps to SQL Many to Many relationship.
type CommentVote {
  comment_id: Int!
  vote_value: VoteValue!
  user_id: Int!
}

type Comment {
  comment_id: Int!
  response_to_comment_id: Int # used when one comment is in response to another comment, nesting it
  post_id: Int!
  user_id: Int!
  user: User! ## field resolver
  comment_text: String!
  created_at: Time!
  comments: PaginatedComments ## field resolver for subcomments
  votes: Votes! ## field resolver
  deleted: Boolean! ## deleted comments will still be stored in the database
  ## to allow for undoing a delete and restoring comments / votes
  hasSubComments: Boolean! ## check if subcomments available, which can then
  ## be retrieved via the getManyComments resolver
}

## distinguish whether a comment is in response to the post or another comment
enum ParentType {
  post
  comment
}

input CommentSearch {
  parent_id: Int!
  parent_type: ParentType!
  offset: Int!
  limit: Int!
}

type PaginatedComments {
  comments: [Comment]
  more: Boolean!
}

type Query {
  getPost(post_id: Int!): Post ## nullable for when no post found
  getUser(user_id: Int!): User ## nullable for when no user found
  getUserByUsername(username: String!): User ## nullable for when no user found
  ## usernames will be used for routing on the frontend
  ## with getUserByUsername used as a starting point to get user_id and other info
  ## via field resolvers
  ## users can change their username, so user_id is preferred as an immutable identifier
  ## but for more intuitive routing (blog/myusername vs blog/2), username will be preferred
  getManyPosts(postSearch: PostSearch!, author_id: Int!): PaginatedPosts!
  getManyUsers(userSearch: UserSearch!): PaginatedUsers!
  getManyComments(commentSearch: CommentSearch!): PaginatedComments! # field resolver
  # authentication:
  me: User # authenticate signed in user
  isAuthor(author_id: Int!): Boolean! # authenticate author
}

type Mutation {
  addPost(postInput: PostInput!, author_id: Int!): Post!
  editPost(post_id: Int!, postInput: PostInput!, author_id: Int!): Post!
  deletePost(post_id: Int!, author_id: Int!): Boolean!
  restorePost(post_id: Int!, author_id: Int!): Boolean!
  addComment(
    post_id: Int!
    response_to_comment_id: Int
    comment_text: String!
  ): Comment!
  editComment(comment_id: Int!, new_comment_text: String!): Comment!
  deleteComment(comment_id: Int!): Boolean!
  restoreComment(comment_id: Int!): Boolean!
  voteOnPost(post_id: Int!, vote_value: VoteValue!): PostVote!
  voteOnComment(comment_id: Int!, vote_value: VoteValue!): CommentVote!
  # authentication:
  registerNewUser(userInput: UserInput!): User!
  login(username: String!, password: String!): User!
  logout: Boolean!
  forgotPassword(username: String!): Boolean!
  accessPasswordReset(resetKey: String!): Boolean!
  resetPassword(resetKey: String!, user_id: Int!, new_password: String!): User!
}
