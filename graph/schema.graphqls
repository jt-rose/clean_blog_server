#### GRAPHQL SDL ####
scalar Time

type User {
  userID: Int! ## SQL generated PK
  username: String!
  email: String!
  ## password - not shared via graphql
  posts: [Post]
  date_joined: Time!
}

input UserInput {
  username: String!
  email: String!
  password: String!
}

# Votes is a calculated object returning the up and down votes for either
# a post or a comment
type Votes {
  upvote: Int!
  downvote: Int!
}

# tracked vote record for particular posts. Maps to SQL Many to Many relationship.
type PostVote {
  postID: Int!
  voteValue: Int! # -1 or 1
  userID: Int!
}

type Post {
  postID: Int!
  user: User # field resolver
  title: String!
  subTitle: String ## optional
  post_text: String! ## will store a JSON-serialized version of the HTML markup
  date_posted: Time!
  votes: Votes! ## field resolver
}

# tracked vote record for particular comments. Maps to SQL Many to Many relationship.
type CommentVote {
  commentID: Int!
  voteValue: Int! # -1 or 1
  userID: Int!
}

type Comment {
  commentID: Int!
  responseToCommentID: Int! # used when one comment is in response to another comment, nesting it
  postID: Int!
  userID: Int!
  user: User! ## field resolver
  comment_text: String!
  date_posted: Time!
  votes: Votes! ## field resolver
}

type Query {
  getPost(postID: Int!): Post!
  getManyPosts(postIDs: [Int!]!): [Post!]!
  getComments(postID: Int!): [Comment!]! # field resolver
  # authentication:
  me(userID: Int!): Boolean! # authenticate signed in user
  isAuthor(userID: Int!): Boolean! # authenticate author
}

input PostInput {
  title: String!
  subTitle: String
  text: String!
}

type Mutation {
  addPost(postInput: PostInput!): Post!
  editPost(postID: Int!, postInput: PostInput!): Post!
  deletePost(postID: Int!): Boolean!
  addComment(postID: Int!, responseToCommentID: Int, comment: String!): Comment!
  editComment(commentID: Int!, newComment: String!): Comment!
  deleteComment(commentID: Int!): Boolean!
  voteOnPost(postID: Int!, voteValue: Int!): PostVote!
  voteOnComment(commentID: Int!, voteValue: Int!): CommentVote!
  # authentication:
  registerNewUser(userInput: UserInput!): User!
  login(username: String!, password: String!): User!
  logout: Boolean!
  forgotPassword(username: String!): Boolean!
  resetPassword(username: String!, newPassword: String!): User!
}
